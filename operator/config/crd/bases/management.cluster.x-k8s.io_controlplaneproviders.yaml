
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1-0.20201002000720-57250aac17f6
  creationTimestamp: null
  name: controlplaneproviders.management.cluster.x-k8s.io
spec:
  group: management.cluster.x-k8s.io
  names:
    kind: ControlPlaneProvider
    listKind: ControlPlaneProviderList
    plural: controlplaneproviders
    singular: controlplaneprovider
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ControlPlaneProvider is the Schema for the controlplaneproviders API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ControlPlaneProviderSpec defines the desired state of ControlPlaneProvider
            properties:
              deployment:
                description: Deployment defines the properties that can be enabled on the deployment for the provider.
                properties:
                  containers:
                    description: List of containers specified in the Deployment
                    items:
                      description: ContainerSpec defines the properties available to override for each container in a provider deployment such as Image and Args to the container’s entrypoint.
                      properties:
                        args:
                          additionalProperties:
                            type: string
                          description: Args represents extra provider specific flags that are not encoded as fields in this API.
                          type: object
                        image:
                          description: Docker image name
                          type: string
                        name:
                          description: Name of the container. Cannot be updated.
                          type: string
                        resources:
                          description: Compute resources required by this container.
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                  replicas:
                    description: Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
                    type: integer
                type: object
              fetchConfig:
                description: FetchConfig determines how the operator will fetch the components and metadata for the provider. If nil, the operator will try to fetch components according to default settings embedded in the operator and in clusterctl.
                properties:
                  selector:
                    description: Selector to be used for fetching provider’s components and metadata from ConfigMaps stored inside the cluster. Each ConfigMap is expected to contain components and metadata for a specific version only.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                        type: object
                    type: object
                  url:
                    description: URL to be used for fetching provider’s components and metadata from a remote repository.
                    type: string
                type: object
              manager:
                description: Manager defines the properties that can be enabled on the controller manager for the provider.
                properties:
                  cacheNamespace:
                    description: "CacheNamespace if specified restricts the manager's cache to watch objects in the desired namespace Defaults to all namespaces \n Note: If a namespace is specified, controllers can still Watch for a cluster-scoped resource (e.g Node).  For namespaced resources the cache will only hold objects from the desired namespace."
                    type: string
                  debug:
                    description: Debug, if set, will override a set of fields with opinionated values for a debugging session. (Verbosity=5, ProfilerAddress=localhost:6060)
                    type: boolean
                  featureGates:
                    additionalProperties:
                      type: boolean
                    description: FeatureGates define provider specific feature flags that will be passed in as container args to the provider's controller manager.
                    type: object
                  gracefulShutDown:
                    description: GracefulShutdownTimeout is the duration given to runnable to stop before the manager actually returns on stop. To disable graceful shutdown, set to time.Duration(0) To use graceful shutdown without timeout, set to a negative duration, e.G. time.Duration(-1) The graceful shutdown is skipped for safety reasons in case the leadere election lease is lost.
                    type: string
                  health:
                    description: Health contains the controller health configuration
                    properties:
                      healthProbeBindAddress:
                        description: HealthProbeBindAddress is the TCP address that the controller should bind to for serving health probes
                        type: string
                      livenessEndpointName:
                        description: LivenessEndpointName, defaults to "healthz"
                        type: string
                      readinessEndpointName:
                        description: ReadinessEndpointName, defaults to "readyz"
                        type: string
                    type: object
                  leaderElection:
                    description: LeaderElection is the LeaderElection config to be used when configuring the manager.Manager leader election
                    properties:
                      leaderElect:
                        description: leaderElect enables a leader election client to gain leadership before executing the main loop. Enable this when running replicated components for high availability.
                        type: boolean
                      leaseDuration:
                        description: leaseDuration is the duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.
                        type: string
                      renewDeadline:
                        description: renewDeadline is the interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.
                        type: string
                      resourceLock:
                        description: resourceLock indicates the resource object type that will be used to lock during leader election cycles.
                        type: string
                      resourceName:
                        description: resourceName indicates the name of resource object that will be used to lock during leader election cycles.
                        type: string
                      resourceNamespace:
                        description: resourceName indicates the namespace of resource object that will be used to lock during leader election cycles.
                        type: string
                      retryPeriod:
                        description: retryPeriod is the duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.
                        type: string
                    required:
                    - leaderElect
                    - leaseDuration
                    - renewDeadline
                    - resourceLock
                    - resourceName
                    - resourceNamespace
                    - retryPeriod
                    type: object
                  maxConcurrentReconciles:
                    description: MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 10.
                    type: integer
                  metrics:
                    description: Metrics contains thw controller metrics configuration
                    properties:
                      bindAddress:
                        description: BindAddress is the TCP address that the controller should bind to for serving prometheus metrics. It can be set to "0" to disable the metrics serving.
                        type: string
                    type: object
                  profilerAddress:
                    description: ProfilerAddress defines the bind address to expose the pprof profiler (e.g. localhost:6060). Default empty, meaning the profiler is disabled.
                    type: string
                  syncPeriod:
                    description: SyncPeriod determines the minimum frequency at which watched resources are reconciled. A lower period will correct entropy more quickly, but reduce responsiveness to change if there are many watched resources. Change this value only if you know what you are doing. Defaults to 10 hours if unset. there will a 10 percent jitter between the SyncPeriod of all controllers so that all controllers will not send list requests simultaneously.
                    type: string
                  verbosity:
                    description: Verbosity set the logs verbosity. Defaults to 1.
                    type: integer
                  webhook:
                    description: Webhook contains the controllers webhook configuration
                    properties:
                      certDir:
                        description: CertDir is the directory that contains the server key and certificate. if not set, webhook server would look up the server key and certificate in {TempDir}/k8s-webhook-server/serving-certs. The server key and certificate must be named tls.key and tls.crt, respectively.
                        type: string
                      host:
                        description: Host is the hostname that the webhook server binds to. It is used to set webhook.Server.Host.
                        type: string
                      port:
                        description: Port is the port that the webhook server serves at. It is used to set webhook.Server.Port.
                        type: integer
                    type: object
                type: object
              paused:
                description: Paused prevents the operator from reconciling the provider. This can be used when doing an upgrade or move action manually.
                type: boolean
              secretName:
                description: SecretName is the name of the Secret providing the configuration variables for the current provider instance, like e.g. credentials. Such configurations will be used when creating or upgrading provider components.
                type: string
              version:
                description: Version indicates the provider version.
                type: string
            type: object
          status:
            description: ControlPlaneProviderStatus defines the observed state of ControlPlaneProvider
            properties:
              conditions:
                description: Conditions define the current service state of the cluster.
                items:
                  description: Condition defines an observation of a Cluster API resource operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              contract:
                description: Contract will contain the core provider contract that the provider is abiding by, like e.g. v1alpha3.
                type: string
              observedGeneration:
                description: ObservedGeneration is the latest generation observed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
